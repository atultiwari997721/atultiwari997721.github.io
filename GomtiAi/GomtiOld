
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gomti AI Chatbot</title>
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Base styles for a modern look */
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #f0f2f5; /* A softer background color */
        }

        #chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            width: 100%;
            max-width: 800px; /* Max width for desktop for better readability */
            margin: 0 auto;
            background-color: #ffffff;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-radius: 16px; /* Rounded corners for the main container on desktop */
        }

        /* Full screen on mobile */
        @media (max-width: 768px) {
            #chat-container {
                border-radius: 0;
                height: 100vh;
            }
        }

        #chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.25rem;
            text-align: center;
            border-top-left-radius: 16px;
            border-top-right-radius: 16px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10;
        }
         @media (max-width: 768px) {
            #chat-header {
                border-radius: 0;
            }
        }


        #chat-header h1 {
            font-size: 1.75rem;
            font-weight: 700;
            letter-spacing: 1px;
        }

        #chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            background-color: #f7f8fa;
        }

        .message-row {
            display: flex;
            width: 100%;
            align-items: flex-end; /* Align items to the bottom */
            gap: 0.5rem;
        }
        
        .message-bubble {
            max-width: 80%;
            padding: 0.75rem 1rem;
            border-radius: 1.25rem;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
            font-size: 0.95rem;
            line-height: 1.5;
            word-wrap: break-word;
        }

        .user-message .message-bubble {
            background-color: #667eea;
            color: white;
            border-bottom-right-radius: 0.5rem;
        }

        .bot-message .message-bubble {
            background-color: #ffffff;
            color: #333;
            border-bottom-left-radius: 0.5rem;
        }
        
        .user-message {
            justify-content: flex-end;
        }

        .bot-message {
            justify-content: flex-start;
        }
        
        /* Speak Button Styling */
        .speak-button {
            background: #eef2ff;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.2s ease;
            flex-shrink: 0; /* Prevent button from shrinking */
        }

        .speak-button:hover {
            background-color: #dbeafe;
            transform: scale(1.1);
        }

        .speak-button svg {
            width: 18px;
            height: 18px;
            color: #667eea;
        }
        
        /* Code Block Styling */
        .code-container {
            background-color: #1e293b; /* Dark background for code */
            color: #e2e8f0;
            border-radius: 0.75rem;
            padding: 1rem;
            margin-top: 0.5rem;
            position: relative;
            overflow-x: auto;
            font-family: 'Courier New', Courier, monospace;
        }

        .code-container pre {
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        
        .copy-button {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            background-color: #334155;
            color: #e2e8f0;
            padding: 0.25rem 0.75rem;
            border-radius: 0.375rem;
            font-size: 0.8rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
            border: none;
        }

        .copy-button:hover {
            background-color: #475569;
        }

        #message-input-area {
            padding: 1rem 1.5rem;
            background-color: #ffffff;
            border-top: 1px solid #e5e7eb;
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            border-bottom-left-radius: 16px;
            border-bottom-right-radius: 16px;
        }
        @media (max-width: 768px) {
            #message-input-area {
                border-radius: 0;
                padding: 0.75rem;
            }
        }

        #message-input {
            flex: 1;
            padding: 0.75rem 1rem;
            border: 1px solid #dcdfe6;
            border-radius: 2rem;
            outline: none;
            resize: none;
            max-height: 120px;
            overflow-y: auto;
            background-color: #f7f8fa;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        #message-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
        }

        .icon-button {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 48px;
            height: 48px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            color: white;
            flex-shrink: 0;
        }

        #mic-button {
            background-color: #a0aec0;
        }
        #mic-button.listening {
             background-color: #ef4444; /* Red when listening */
             animation: pulse 1.5s infinite;
        }
        
        #send-button {
             background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .icon-button:hover {
            transform: translateY(-2px);
        }

        .icon-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .icon-button svg {
            width: 24px;
            height: 24px;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
            100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0); }
        }

        /* Loading Indicator */
        .loading-dots {
            display: flex;
            gap: 0.25rem;
        }
        .loading-dot {
            width: 0.6rem;
            height: 0.6rem;
            background-color: #a0aec0;
            border-radius: 50%;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loading-dot:nth-child(1) { animation-delay: -0.32s; }
        .loading-dot:nth-child(2) { animation-delay: -0.16s; }
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1.0); }
        }
    </style>
</head>
<body>
    <div id="chat-container">
        <header id="chat-header">
            <h1>Gomti AI</h1>
        </header>

        <div id="chat-messages">
            <!-- Messages will be appended here -->
        </div>

        <div id="message-input-area">
            <textarea id="message-input" placeholder="Type or speak your message..." rows="1"></textarea>
            <button id="mic-button" class="icon-button" title="Search with voice">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 18.75a6 6 0 006-6v-1.5m-6 7.5a6 6 0 01-6-6v-1.5m12 0v-1.5a6 6 0 00-12 0v1.5m12 0v-1.5a6 6 0 00-12 0v1.5" />
                </svg>
            </button>
            <button id="send-button" class="icon-button" title="Send message">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                </svg>
            </button>
        </div>
    </div>

    <script>
        // DOM Element References
        const chatMessages = document.getElementById('chat-messages');
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-button');
        const micButton = document.getElementById('mic-button');

        // State Management
        const messages = [];
        let isLoading = false;

        // Speech Recognition (STT) Setup
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition;

        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = false;
            recognition.lang = 'en-US';
            recognition.interimResults = false;
            recognition.maxAlternatives = 1;

            recognition.onresult = (event) => {
                const speechResult = event.results[0][0].transcript;
                messageInput.value = speechResult; // Update input field with speech result
                adjustTextareaHeight(); // Adjust height after adding text
            };

            recognition.onspeechend = () => {
                recognition.stop();
                micButton.classList.remove('listening');
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
                if (event.error === 'not-allowed') {
                    alert('Microphone access was denied. Please allow microphone access in your browser settings.');
                }
                micButton.classList.remove('listening');
            };
        } else {
            console.warn('Speech Recognition not supported in this browser.');
            micButton.style.display = 'none';
        }

        // --- Core Functions ---

        // Appends a message to the chat UI
        function appendMessage(text, sender) {
            const messageRow = document.createElement('div');
            messageRow.classList.add('message-row', sender === 'user' ? 'user-message' : 'bot-message');

            const messageBubble = document.createElement('div');
            messageBubble.classList.add('message-bubble');

            // Regex to detect a Markdown fenced code block
            const codeBlockRegex = /^\s*```(\w+)?\n([\s\S]*?)\n\s*```\s*$/;
            const match = text.match(codeBlockRegex);

            if (sender === 'bot' && match) {
                // Handle code blocks
                const codeContent = match[2].trim();
                const codeContainer = document.createElement('div');
                codeContainer.className = 'code-container';
                
                const pre = document.createElement('pre');
                pre.textContent = codeContent;
                codeContainer.appendChild(pre);

                const copyBtn = document.createElement('button');
                copyBtn.className = 'copy-button';
                copyBtn.textContent = 'Copy';
                copyBtn.onclick = () => {
                    const textarea = document.createElement('textarea');
                    textarea.value = codeContent;
                    document.body.appendChild(textarea);
                    textarea.select();
                    try {
                        document.execCommand('copy');
                        copyBtn.textContent = 'Copied!';
                    } catch (err) {
                        copyBtn.textContent = 'Failed!';
                    }
                    document.body.removeChild(textarea);
                    setTimeout(() => { copyBtn.textContent = 'Copy'; }, 2000);
                };
                codeContainer.appendChild(copyBtn);
                messageBubble.appendChild(codeContainer);
            } else {
                // Handle regular text
                const p = document.createElement('p');
                p.textContent = text;
                messageBubble.appendChild(p);
            }
            
            messageRow.appendChild(messageBubble);

            // Add speak button for bot messages
            if (sender === 'bot') {
                const speakButton = document.createElement('button');
                speakButton.className = 'speak-button';
                speakButton.title = 'Read aloud';

                const speakIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M19.114 5.636a9 9 0 010 12.728M16.463 8.288a5.25 5.25 0 010 7.424M6.75 8.25l4.72-4.72a.75.75 0 011.28.53v15.88a.75.75 0 01-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.01 9.01 0 012.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75z" /></svg>`;
                const stopIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /><path stroke-linecap="round" stroke-linejoin="round" d="M9 9.563C9 9.252 9.252 9 9.563 9h4.874c.311 0 .563.252.563.563v4.874c0 .311-.252.563-.563.563H9.563C9.252 14.437 9 14.185 9 13.874V9.563Z" /></svg>`;
                
                speakButton.innerHTML = speakIconSVG;

                const handleStop = () => {
                    speechSynthesis.cancel();
                };

                const handleSpeak = () => {
                    if (!('speechSynthesis' in window)) {
                        console.error('Speech Synthesis not supported.');
                        return;
                    }
                    speechSynthesis.cancel(); // Stop any other utterance that might be playing

                    const utterance = new SpeechSynthesisUtterance(text.replace(/```[\s\S]*?```/g, 'Code block.'));
                    utterance.lang = 'en-US';

                    // This handler resets the button's state
                    const resetBtn = () => {
                        speakButton.innerHTML = speakIconSVG;
                        speakButton.title = 'Read aloud';
                        speakButton.onclick = handleSpeak;
                    };

                    utterance.onstart = () => {
                        speakButton.innerHTML = stopIconSVG;
                        speakButton.title = 'Stop speaking';
                        speakButton.onclick = handleStop;
                    };

                    utterance.onend = resetBtn; // Fires on natural end or when cancelled
                    utterance.onerror = (e) => {
                        console.error('Speech synthesis error:', e);
                        resetBtn(); // Also reset on error
                    };

                    speechSynthesis.speak(utterance);
                };

                speakButton.onclick = handleSpeak;
                messageRow.appendChild(speakButton);
            }

            chatMessages.appendChild(messageRow);
            scrollToBottom();
        }

        // Shows a loading indicator
        function showLoadingIndicator() {
            const loadingRow = document.createElement('div');
            loadingRow.id = 'loading-indicator';
            loadingRow.classList.add('message-row', 'bot-message');
            loadingRow.innerHTML = `
                <div class="message-bubble">
                    <div class="loading-dots">
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                        <div class="loading-dot"></div>
                    </div>
                </div>`;
            chatMessages.appendChild(loadingRow);
            scrollToBottom();
        }

        // Hides the loading indicator
        function hideLoadingIndicator() {
            const indicator = document.getElementById('loading-indicator');
            if (indicator) indicator.remove();
        }

        // Main function to handle sending a message
        async function handleSendMessage() {
            const input = messageInput.value.trim();
            if (input === '' || isLoading) return;

            appendMessage(input, 'user');
            messages.push({ role: 'user', parts: [{ text: input }] });
            messageInput.value = '';
            adjustTextareaHeight();

            setLoadingState(true);

            try {
                // The API key and URL are now set to your provided values.
                const apiKey = "AIzaSyAP3dkecdjrLhVp4ubnSOxGNIVeNFe54_Y"; 
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
                
                const payload = { contents: messages };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error.message || 'API request failed');
                }

                const result = await response.json();
                const botResponseText = result.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I could not get a response.';

                appendMessage(botResponseText, 'bot');
                messages.push({ role: 'model', parts: [{ text: botResponseText }] });

            } catch (error) {
                console.error('API Error:', error);
                appendMessage(`Error: ${error.message}. Please check the console.`, 'bot');
            } finally {
                setLoadingState(false);
            }
        }
        
        // --- Helper Functions & Event Listeners ---

        function setLoadingState(state) {
            isLoading = state;
            sendButton.disabled = state;
            micButton.disabled = state;
            messageInput.disabled = state;
            if (state) {
                showLoadingIndicator();
            } else {
                hideLoadingIndicator();
            }
        }

        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function adjustTextareaHeight() {
            messageInput.style.height = 'auto';
            messageInput.style.height = `${messageInput.scrollHeight}px`;
        }

        // Event Listeners
        sendButton.addEventListener('click', handleSendMessage);
        micButton.addEventListener('click', () => {
            if (recognition && !isLoading) {
                micButton.classList.add('listening');
                recognition.start();
            }
        });

        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
            }
        });

        messageInput.addEventListener('input', adjustTextareaHeight);
        
        // Initial welcome message
        window.onload = () => {
            appendMessage("Hello! How can I assist you today?", 'bot');
        };

    </script>
</body>
</html>
